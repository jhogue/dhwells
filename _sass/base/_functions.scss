// @file functions.scss

// Map deep get
// @author Hugo Giraudel
// @access public
// @param {Map} $map - Map
// @param {Arglist} $keys - Key chain
// @return {*} - Desired value
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}


// Bourbon changes px values to EM or REM. 
// Here we change a unitless value to px
// @jhogue
@function px($value) {
	// Make sure it is unitless
	$value: strip-units($value);
	@return ($value * 1px);
}



// Used for responsive typography and managing breakpoint values
// @requires: SASS map of $breakpoints
// @requires: SASS map of $type-sizes
// @usage: For an EM value: bp(name)
// @usage: For an PX value: bppx(name)
// @usage: For a corresponding text size (from base/_textsize.scss): rwd-size(element,group)
@function bp($size: 'base') {
	@return em( map-get( $breakpoints, $size ) );
}

@function bppx($size: 'base') {
	@return px( map-get( $breakpoints, $size ) );
}

@function rwd-size($elem, $group: 'base') {
	@return map-get( map-get($type-sizes, $group), $elem );
}


// Bourbon Neat helper function
// Returns a percentage value of a column width
// Can then be used as margin or padding on any element
// @requires: Bourbon Neat's container-shift(), flex-grid() and flex-gutter() functions
// @usage: padding: 1em columns(1);
// @jhogue
@function column($shift: $columns of $container-columns) {
	$n-columns: nth($shift, 1);
	$parent-columns: container-shift($shift) !global;

	@return $n-columns * flex-grid(1, $parent-columns) + $n-columns * flex-gutter($parent-columns);

	// Reset nesting context
	$parent-columns: $grid-columns !global;
}


// Emulate the way Adobe Illustrator allows percentages of defined global colors 
// @accepts: color as Hex, RGB or HSL. Percent as numeric
// Optional: Background color for mixing function
// @returns: hexidecimal color
// Inspiration from http://thesassway.com/intermediate/mixins-for-semi-transparent-colors
@function percent-color( $color, $percent, $background: white ) {
	$percent: strip-units($percent); 
	$opaque: opacify($color, 1);
	$solid-color: mix($opaque, $background, $percent);
	@return $solid-color; 
}